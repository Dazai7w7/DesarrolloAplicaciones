{"ast":null,"code":"/** @license React v0.19.1\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    var enableSchedulerDebugging = false;\n    var enableProfiling = true;\n    var requestHostCallback;\n    var requestHostTimeout;\n    var cancelHostTimeout;\n    var shouldYieldToHost;\n    var requestPaint;\n\n    if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n    // implementation using setTimeout.\n    typeof window === 'undefined' || // Check if MessageChannel is supported, too.\n    typeof MessageChannel !== 'function') {\n      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n      // fallback to a naive implementation.\n      var _callback = null;\n      var _timeoutID = null;\n\n      var _flushCallback = function () {\n        if (_callback !== null) {\n          try {\n            var currentTime = exports.unstable_now();\n            var hasRemainingTime = true;\n\n            _callback(hasRemainingTime, currentTime);\n\n            _callback = null;\n          } catch (e) {\n            setTimeout(_flushCallback, 0);\n            throw e;\n          }\n        }\n      };\n\n      var initialTime = Date.now();\n\n      exports.unstable_now = function () {\n        return Date.now() - initialTime;\n      };\n\n      requestHostCallback = function (cb) {\n        if (_callback !== null) {\n          // Protect against re-entrancy.\n          setTimeout(requestHostCallback, 0, cb);\n        } else {\n          _callback = cb;\n          setTimeout(_flushCallback, 0);\n        }\n      };\n\n      requestHostTimeout = function (cb, ms) {\n        _timeoutID = setTimeout(cb, ms);\n      };\n\n      cancelHostTimeout = function () {\n        clearTimeout(_timeoutID);\n      };\n\n      shouldYieldToHost = function () {\n        return false;\n      };\n\n      requestPaint = exports.unstable_forceFrameRate = function () {};\n    } else {\n      // Capture local references to native APIs, in case a polyfill overrides them.\n      var performance = window.performance;\n      var _Date = window.Date;\n      var _setTimeout = window.setTimeout;\n      var _clearTimeout = window.clearTimeout;\n\n      if (typeof console !== 'undefined') {\n        // TODO: Scheduler no longer requires these methods to be polyfilled. But\n        // maybe we want to continue warning if they don't exist, to preserve the\n        // option to rely on it in the future?\n        var requestAnimationFrame = window.requestAnimationFrame;\n        var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link\n\n        if (typeof requestAnimationFrame !== 'function') {\n          // Using console['error'] to evade Babel and ESLint\n          console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n\n        if (typeof cancelAnimationFrame !== 'function') {\n          // Using console['error'] to evade Babel and ESLint\n          console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n      }\n\n      if (typeof performance === 'object' && typeof performance.now === 'function') {\n        exports.unstable_now = function () {\n          return performance.now();\n        };\n      } else {\n        var _initialTime = _Date.now();\n\n        exports.unstable_now = function () {\n          return _Date.now() - _initialTime;\n        };\n      }\n\n      var isMessageLoopRunning = false;\n      var scheduledHostCallback = null;\n      var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n      // thread, like user events. By default, it yields multiple times per frame.\n      // It does not attempt to align with frame boundaries, since most tasks don't\n      // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n      var yieldInterval = 5;\n      var deadline = 0; // TODO: Make this configurable\n\n      {\n        // `isInputPending` is not available. Since we have no way of knowing if\n        // there's pending input, always yield at the end of the frame.\n        shouldYieldToHost = function () {\n          return exports.unstable_now() >= deadline;\n        }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n        requestPaint = function () {};\n      }\n\n      exports.unstable_forceFrameRate = function (fps) {\n        if (fps < 0 || fps > 125) {\n          // Using console['error'] to evade Babel and ESLint\n          console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\n          return;\n        }\n\n        if (fps > 0) {\n          yieldInterval = Math.floor(1000 / fps);\n        } else {\n          // reset the framerate\n          yieldInterval = 5;\n        }\n      };\n\n      var performWorkUntilDeadline = function () {\n        if (scheduledHostCallback !== null) {\n          var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n          // cycle. This means there's always time remaining at the beginning of\n          // the message event.\n\n          deadline = currentTime + yieldInterval;\n          var hasTimeRemaining = true;\n\n          try {\n            var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n            if (!hasMoreWork) {\n              isMessageLoopRunning = false;\n              scheduledHostCallback = null;\n            } else {\n              // If there's more work, schedule the next message event at the end\n              // of the preceding one.\n              port.postMessage(null);\n            }\n          } catch (error) {\n            // If a scheduler task throws, exit the current browser task so the\n            // error can be observed.\n            port.postMessage(null);\n            throw error;\n          }\n        } else {\n          isMessageLoopRunning = false;\n        } // Yielding to the browser will give it a chance to paint, so we can\n\n      };\n\n      var channel = new MessageChannel();\n      var port = channel.port2;\n      channel.port1.onmessage = performWorkUntilDeadline;\n\n      requestHostCallback = function (callback) {\n        scheduledHostCallback = callback;\n\n        if (!isMessageLoopRunning) {\n          isMessageLoopRunning = true;\n          port.postMessage(null);\n        }\n      };\n\n      requestHostTimeout = function (callback, ms) {\n        taskTimeoutID = _setTimeout(function () {\n          callback(exports.unstable_now());\n        }, ms);\n      };\n\n      cancelHostTimeout = function () {\n        _clearTimeout(taskTimeoutID);\n\n        taskTimeoutID = -1;\n      };\n    }\n\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      siftUp(heap, node, index);\n    }\n\n    function peek(heap) {\n      var first = heap[0];\n      return first === undefined ? null : first;\n    }\n\n    function pop(heap) {\n      var first = heap[0];\n\n      if (first !== undefined) {\n        var last = heap.pop();\n\n        if (last !== first) {\n          heap[0] = last;\n          siftDown(heap, last, 0);\n        }\n\n        return first;\n      } else {\n        return null;\n      }\n    }\n\n    function siftUp(heap, node, i) {\n      var index = i;\n\n      while (true) {\n        var parentIndex = index - 1 >>> 1;\n        var parent = heap[parentIndex];\n\n        if (parent !== undefined && compare(parent, node) > 0) {\n          // The parent is larger. Swap positions.\n          heap[parentIndex] = node;\n          heap[index] = parent;\n          index = parentIndex;\n        } else {\n          // The parent is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function siftDown(heap, node, i) {\n      var index = i;\n      var length = heap.length;\n\n      while (index < length) {\n        var leftIndex = (index + 1) * 2 - 1;\n        var left = heap[leftIndex];\n        var rightIndex = leftIndex + 1;\n        var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n        if (left !== undefined && compare(left, node) < 0) {\n          if (right !== undefined && compare(right, left) < 0) {\n            heap[index] = right;\n            heap[rightIndex] = node;\n            index = rightIndex;\n          } else {\n            heap[index] = left;\n            heap[leftIndex] = node;\n            index = leftIndex;\n          }\n        } else if (right !== undefined && compare(right, node) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          // Neither child is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function compare(a, b) {\n      // Compare sort index first, then task id.\n      var diff = a.sortIndex - b.sortIndex;\n      return diff !== 0 ? diff : a.id - b.id;\n    } // TODO: Use symbols?\n\n\n    var NoPriority = 0;\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5;\n    var runIdCounter = 0;\n    var mainThreadIdCounter = 0;\n    var profilingStateSize = 4;\n    var sharedProfilingBuffer = // $FlowFixMe Flow doesn't know about SharedArrayBuffer\n    typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\n    typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n    ;\n    var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\n    var PRIORITY = 0;\n    var CURRENT_TASK_ID = 1;\n    var CURRENT_RUN_ID = 2;\n    var QUEUE_SIZE = 3;\n    {\n      profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n      // array might include canceled tasks.\n\n      profilingState[QUEUE_SIZE] = 0;\n      profilingState[CURRENT_TASK_ID] = 0;\n    } // Bytes per element is 4\n\n    var INITIAL_EVENT_LOG_SIZE = 131072;\n    var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\n    var eventLogSize = 0;\n    var eventLogBuffer = null;\n    var eventLog = null;\n    var eventLogIndex = 0;\n    var TaskStartEvent = 1;\n    var TaskCompleteEvent = 2;\n    var TaskErrorEvent = 3;\n    var TaskCancelEvent = 4;\n    var TaskRunEvent = 5;\n    var TaskYieldEvent = 6;\n    var SchedulerSuspendEvent = 7;\n    var SchedulerResumeEvent = 8;\n\n    function logEvent(entries) {\n      if (eventLog !== null) {\n        var offset = eventLogIndex;\n        eventLogIndex += entries.length;\n\n        if (eventLogIndex + 1 > eventLogSize) {\n          eventLogSize *= 2;\n\n          if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n            // Using console['error'] to evade Babel and ESLint\n            console['error'](\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n            stopLoggingProfilingEvents();\n            return;\n          }\n\n          var newEventLog = new Int32Array(eventLogSize * 4);\n          newEventLog.set(eventLog);\n          eventLogBuffer = newEventLog.buffer;\n          eventLog = newEventLog;\n        }\n\n        eventLog.set(entries, offset);\n      }\n    }\n\n    function startLoggingProfilingEvents() {\n      eventLogSize = INITIAL_EVENT_LOG_SIZE;\n      eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n      eventLog = new Int32Array(eventLogBuffer);\n      eventLogIndex = 0;\n    }\n\n    function stopLoggingProfilingEvents() {\n      var buffer = eventLogBuffer;\n      eventLogSize = 0;\n      eventLogBuffer = null;\n      eventLog = null;\n      eventLogIndex = 0;\n      return buffer;\n    }\n\n    function markTaskStart(task, ms) {\n      {\n        profilingState[QUEUE_SIZE]++;\n\n        if (eventLog !== null) {\n          // performance.now returns a float, representing milliseconds. When the\n          // event is logged, it's coerced to an int. Convert to microseconds to\n          // maintain extra degrees of precision.\n          logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n        }\n      }\n    }\n\n    function markTaskCompleted(task, ms) {\n      {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[QUEUE_SIZE]--;\n\n        if (eventLog !== null) {\n          logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n\n    function markTaskCanceled(task, ms) {\n      {\n        profilingState[QUEUE_SIZE]--;\n\n        if (eventLog !== null) {\n          logEvent([TaskCancelEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n\n    function markTaskErrored(task, ms) {\n      {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[QUEUE_SIZE]--;\n\n        if (eventLog !== null) {\n          logEvent([TaskErrorEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n\n    function markTaskRun(task, ms) {\n      {\n        runIdCounter++;\n        profilingState[PRIORITY] = task.priorityLevel;\n        profilingState[CURRENT_TASK_ID] = task.id;\n        profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n        if (eventLog !== null) {\n          logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n        }\n      }\n    }\n\n    function markTaskYield(task, ms) {\n      {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[CURRENT_RUN_ID] = 0;\n\n        if (eventLog !== null) {\n          logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n        }\n      }\n    }\n\n    function markSchedulerSuspended(ms) {\n      {\n        mainThreadIdCounter++;\n\n        if (eventLog !== null) {\n          logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n        }\n      }\n    }\n\n    function markSchedulerUnsuspended(ms) {\n      {\n        if (eventLog !== null) {\n          logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n        }\n      }\n    }\n    /* eslint-disable no-var */\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\n    var taskQueue = [];\n    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false;\n\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      var timer = peek(timerQueue);\n\n      while (timer !== null) {\n        if (timer.callback === null) {\n          // Timer was cancelled.\n          pop(timerQueue);\n        } else if (timer.startTime <= currentTime) {\n          // Timer fired. Transfer to the task queue.\n          pop(timerQueue);\n          timer.sortIndex = timer.expirationTime;\n          push(taskQueue, timer);\n          {\n            markTaskStart(timer, currentTime);\n            timer.isQueued = true;\n          }\n        } else {\n          // Remaining timers are pending.\n          return;\n        }\n\n        timer = peek(timerQueue);\n      }\n    }\n\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n\n      if (!isHostCallbackScheduled) {\n        if (peek(taskQueue) !== null) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        } else {\n          var firstTimer = peek(timerQueue);\n\n          if (firstTimer !== null) {\n            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n          }\n        }\n      }\n    }\n\n    function flushWork(hasTimeRemaining, initialTime) {\n      {\n        markSchedulerUnsuspended(initialTime);\n      } // We'll need a host callback the next time work is scheduled.\n\n      isHostCallbackScheduled = false;\n\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n\n      isPerformingWork = true;\n      var previousPriorityLevel = currentPriorityLevel;\n\n      try {\n        if (enableProfiling) {\n          try {\n            return workLoop(hasTimeRemaining, initialTime);\n          } catch (error) {\n            if (currentTask !== null) {\n              var currentTime = exports.unstable_now();\n              markTaskErrored(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            throw error;\n          }\n        } else {\n          // No catch in prod codepath.\n          return workLoop(hasTimeRemaining, initialTime);\n        }\n      } finally {\n        currentTask = null;\n        currentPriorityLevel = previousPriorityLevel;\n        isPerformingWork = false;\n        {\n          var _currentTime = exports.unstable_now();\n\n          markSchedulerSuspended(_currentTime);\n        }\n      }\n    }\n\n    function workLoop(hasTimeRemaining, initialTime) {\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      currentTask = peek(taskQueue);\n\n      while (currentTask !== null && !enableSchedulerDebugging) {\n        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n          // This currentTask hasn't expired, and we've reached the deadline.\n          break;\n        }\n\n        var callback = currentTask.callback;\n\n        if (callback !== null) {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          markTaskRun(currentTask, currentTime);\n          var continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = exports.unstable_now();\n\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n            markTaskYield(currentTask, currentTime);\n          } else {\n            {\n              markTaskCompleted(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n\n        currentTask = peek(taskQueue);\n      } // Return whether there's additional work\n\n\n      if (currentTask !== null) {\n        return true;\n      } else {\n        var firstTimer = peek(timerQueue);\n\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n\n        return false;\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n\n    function timeoutForPriorityLevel(priorityLevel) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          return IMMEDIATE_PRIORITY_TIMEOUT;\n\n        case UserBlockingPriority:\n          return USER_BLOCKING_PRIORITY;\n\n        case IdlePriority:\n          return IDLE_PRIORITY;\n\n        case LowPriority:\n          return LOW_PRIORITY_TIMEOUT;\n\n        case NormalPriority:\n        default:\n          return NORMAL_PRIORITY_TIMEOUT;\n      }\n    }\n\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = exports.unstable_now();\n      var startTime;\n      var timeout;\n\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n\n        timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n      } else {\n        timeout = timeoutForPriorityLevel(priorityLevel);\n        startTime = currentTime;\n      }\n\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        sortIndex: -1\n      };\n      {\n        newTask.isQueued = false;\n      }\n\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        newTask.sortIndex = startTime;\n        push(timerQueue, newTask);\n\n        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        newTask.sortIndex = expirationTime;\n        push(taskQueue, newTask);\n        {\n          markTaskStart(newTask, currentTime);\n          newTask.isQueued = true;\n        } // Schedule a host callback, if needed. If we're already performing work,\n        // wait until the next time we yield.\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        }\n      }\n\n      return newTask;\n    }\n\n    function unstable_pauseExecution() {}\n\n    function unstable_continueExecution() {\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return peek(taskQueue);\n    }\n\n    function unstable_cancelCallback(task) {\n      {\n        if (task.isQueued) {\n          var currentTime = exports.unstable_now();\n          markTaskCanceled(task, currentTime);\n          task.isQueued = false;\n        }\n      } // Null out the callback to indicate the task has been canceled. (Can't\n      // remove from the queue because you can't remove arbitrary nodes from an\n      // array based heap, only the first one.)\n\n      task.callback = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    function unstable_shouldYield() {\n      var currentTime = exports.unstable_now();\n      advanceTimers(currentTime);\n      var firstTask = peek(taskQueue);\n      return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n    }\n\n    var unstable_requestPaint = requestPaint;\n    var unstable_Profiling = {\n      startLoggingProfilingEvents: startLoggingProfilingEvents,\n      stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n      sharedProfilingBuffer: sharedProfilingBuffer\n    };\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_Profiling = unstable_Profiling;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n    exports.unstable_next = unstable_next;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_requestPaint = unstable_requestPaint;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_shouldYield = unstable_shouldYield;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}","map":{"version":3,"names":["process","env","NODE_ENV","enableSchedulerDebugging","enableProfiling","requestHostCallback","requestHostTimeout","cancelHostTimeout","shouldYieldToHost","requestPaint","window","MessageChannel","_callback","_timeoutID","_flushCallback","currentTime","exports","unstable_now","hasRemainingTime","e","setTimeout","initialTime","Date","now","cb","ms","clearTimeout","unstable_forceFrameRate","performance","_Date","_setTimeout","_clearTimeout","console","requestAnimationFrame","cancelAnimationFrame","_initialTime","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","yieldInterval","deadline","fps","Math","floor","performWorkUntilDeadline","hasTimeRemaining","hasMoreWork","port","postMessage","error","channel","port2","port1","onmessage","callback","push","heap","node","index","length","siftUp","peek","first","undefined","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","NoPriority","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","runIdCounter","mainThreadIdCounter","profilingStateSize","sharedProfilingBuffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","ArrayBuffer","profilingState","PRIORITY","CURRENT_TASK_ID","CURRENT_RUN_ID","QUEUE_SIZE","INITIAL_EVENT_LOG_SIZE","MAX_EVENT_LOG_SIZE","eventLogSize","eventLogBuffer","eventLog","eventLogIndex","TaskStartEvent","TaskCompleteEvent","TaskErrorEvent","TaskCancelEvent","TaskRunEvent","TaskYieldEvent","SchedulerSuspendEvent","SchedulerResumeEvent","logEvent","entries","offset","stopLoggingProfilingEvents","newEventLog","set","buffer","startLoggingProfilingEvents","markTaskStart","task","priorityLevel","markTaskCompleted","markTaskCanceled","markTaskErrored","markTaskRun","markTaskYield","markSchedulerSuspended","markSchedulerUnsuspended","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","advanceTimers","timer","startTime","expirationTime","isQueued","handleTimeout","flushWork","firstTimer","previousPriorityLevel","workLoop","_currentTime","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","timeoutForPriorityLevel","unstable_scheduleCallback","options","timeout","delay","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","unstable_shouldYield","firstTask","unstable_requestPaint","unstable_Profiling","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_UserBlockingPriority"],"sources":["C:/Users/Dazai/Documents/GitHub/DesarrolloAplicaciones/dashboard/node_modules/scheduler/cjs/scheduler.development.js"],"sourcesContent":["/** @license React v0.19.1\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n'use strict';\r\n\r\n\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  (function() {\r\n'use strict';\r\n\r\nvar enableSchedulerDebugging = false;\r\nvar enableProfiling = true;\r\n\r\nvar requestHostCallback;\r\nvar requestHostTimeout;\r\nvar cancelHostTimeout;\r\nvar shouldYieldToHost;\r\nvar requestPaint;\r\n\r\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\r\n// implementation using setTimeout.\r\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\r\ntypeof MessageChannel !== 'function') {\r\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\r\n  // fallback to a naive implementation.\r\n  var _callback = null;\r\n  var _timeoutID = null;\r\n\r\n  var _flushCallback = function () {\r\n    if (_callback !== null) {\r\n      try {\r\n        var currentTime = exports.unstable_now();\r\n        var hasRemainingTime = true;\r\n\r\n        _callback(hasRemainingTime, currentTime);\r\n\r\n        _callback = null;\r\n      } catch (e) {\r\n        setTimeout(_flushCallback, 0);\r\n        throw e;\r\n      }\r\n    }\r\n  };\r\n\r\n  var initialTime = Date.now();\r\n\r\n  exports.unstable_now = function () {\r\n    return Date.now() - initialTime;\r\n  };\r\n\r\n  requestHostCallback = function (cb) {\r\n    if (_callback !== null) {\r\n      // Protect against re-entrancy.\r\n      setTimeout(requestHostCallback, 0, cb);\r\n    } else {\r\n      _callback = cb;\r\n      setTimeout(_flushCallback, 0);\r\n    }\r\n  };\r\n\r\n  requestHostTimeout = function (cb, ms) {\r\n    _timeoutID = setTimeout(cb, ms);\r\n  };\r\n\r\n  cancelHostTimeout = function () {\r\n    clearTimeout(_timeoutID);\r\n  };\r\n\r\n  shouldYieldToHost = function () {\r\n    return false;\r\n  };\r\n\r\n  requestPaint = exports.unstable_forceFrameRate = function () {};\r\n} else {\r\n  // Capture local references to native APIs, in case a polyfill overrides them.\r\n  var performance = window.performance;\r\n  var _Date = window.Date;\r\n  var _setTimeout = window.setTimeout;\r\n  var _clearTimeout = window.clearTimeout;\r\n\r\n  if (typeof console !== 'undefined') {\r\n    // TODO: Scheduler no longer requires these methods to be polyfilled. But\r\n    // maybe we want to continue warning if they don't exist, to preserve the\r\n    // option to rely on it in the future?\r\n    var requestAnimationFrame = window.requestAnimationFrame;\r\n    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link\r\n\r\n    if (typeof requestAnimationFrame !== 'function') {\r\n      // Using console['error'] to evade Babel and ESLint\r\n      console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n\r\n    if (typeof cancelAnimationFrame !== 'function') {\r\n      // Using console['error'] to evade Babel and ESLint\r\n      console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n  }\r\n\r\n  if (typeof performance === 'object' && typeof performance.now === 'function') {\r\n    exports.unstable_now = function () {\r\n      return performance.now();\r\n    };\r\n  } else {\r\n    var _initialTime = _Date.now();\r\n\r\n    exports.unstable_now = function () {\r\n      return _Date.now() - _initialTime;\r\n    };\r\n  }\r\n\r\n  var isMessageLoopRunning = false;\r\n  var scheduledHostCallback = null;\r\n  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\r\n  // thread, like user events. By default, it yields multiple times per frame.\r\n  // It does not attempt to align with frame boundaries, since most tasks don't\r\n  // need to be frame aligned; for those that do, use requestAnimationFrame.\r\n\r\n  var yieldInterval = 5;\r\n  var deadline = 0; // TODO: Make this configurable\r\n\r\n  {\r\n    // `isInputPending` is not available. Since we have no way of knowing if\r\n    // there's pending input, always yield at the end of the frame.\r\n    shouldYieldToHost = function () {\r\n      return exports.unstable_now() >= deadline;\r\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\r\n\r\n\r\n    requestPaint = function () {};\r\n  }\r\n\r\n  exports.unstable_forceFrameRate = function (fps) {\r\n    if (fps < 0 || fps > 125) {\r\n      // Using console['error'] to evade Babel and ESLint\r\n      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\r\n      return;\r\n    }\r\n\r\n    if (fps > 0) {\r\n      yieldInterval = Math.floor(1000 / fps);\r\n    } else {\r\n      // reset the framerate\r\n      yieldInterval = 5;\r\n    }\r\n  };\r\n\r\n  var performWorkUntilDeadline = function () {\r\n    if (scheduledHostCallback !== null) {\r\n      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\r\n      // cycle. This means there's always time remaining at the beginning of\r\n      // the message event.\r\n\r\n      deadline = currentTime + yieldInterval;\r\n      var hasTimeRemaining = true;\r\n\r\n      try {\r\n        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\r\n\r\n        if (!hasMoreWork) {\r\n          isMessageLoopRunning = false;\r\n          scheduledHostCallback = null;\r\n        } else {\r\n          // If there's more work, schedule the next message event at the end\r\n          // of the preceding one.\r\n          port.postMessage(null);\r\n        }\r\n      } catch (error) {\r\n        // If a scheduler task throws, exit the current browser task so the\r\n        // error can be observed.\r\n        port.postMessage(null);\r\n        throw error;\r\n      }\r\n    } else {\r\n      isMessageLoopRunning = false;\r\n    } // Yielding to the browser will give it a chance to paint, so we can\r\n  };\r\n\r\n  var channel = new MessageChannel();\r\n  var port = channel.port2;\r\n  channel.port1.onmessage = performWorkUntilDeadline;\r\n\r\n  requestHostCallback = function (callback) {\r\n    scheduledHostCallback = callback;\r\n\r\n    if (!isMessageLoopRunning) {\r\n      isMessageLoopRunning = true;\r\n      port.postMessage(null);\r\n    }\r\n  };\r\n\r\n  requestHostTimeout = function (callback, ms) {\r\n    taskTimeoutID = _setTimeout(function () {\r\n      callback(exports.unstable_now());\r\n    }, ms);\r\n  };\r\n\r\n  cancelHostTimeout = function () {\r\n    _clearTimeout(taskTimeoutID);\r\n\r\n    taskTimeoutID = -1;\r\n  };\r\n}\r\n\r\nfunction push(heap, node) {\r\n  var index = heap.length;\r\n  heap.push(node);\r\n  siftUp(heap, node, index);\r\n}\r\nfunction peek(heap) {\r\n  var first = heap[0];\r\n  return first === undefined ? null : first;\r\n}\r\nfunction pop(heap) {\r\n  var first = heap[0];\r\n\r\n  if (first !== undefined) {\r\n    var last = heap.pop();\r\n\r\n    if (last !== first) {\r\n      heap[0] = last;\r\n      siftDown(heap, last, 0);\r\n    }\r\n\r\n    return first;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction siftUp(heap, node, i) {\r\n  var index = i;\r\n\r\n  while (true) {\r\n    var parentIndex = index - 1 >>> 1;\r\n    var parent = heap[parentIndex];\r\n\r\n    if (parent !== undefined && compare(parent, node) > 0) {\r\n      // The parent is larger. Swap positions.\r\n      heap[parentIndex] = node;\r\n      heap[index] = parent;\r\n      index = parentIndex;\r\n    } else {\r\n      // The parent is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction siftDown(heap, node, i) {\r\n  var index = i;\r\n  var length = heap.length;\r\n\r\n  while (index < length) {\r\n    var leftIndex = (index + 1) * 2 - 1;\r\n    var left = heap[leftIndex];\r\n    var rightIndex = leftIndex + 1;\r\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\r\n\r\n    if (left !== undefined && compare(left, node) < 0) {\r\n      if (right !== undefined && compare(right, left) < 0) {\r\n        heap[index] = right;\r\n        heap[rightIndex] = node;\r\n        index = rightIndex;\r\n      } else {\r\n        heap[index] = left;\r\n        heap[leftIndex] = node;\r\n        index = leftIndex;\r\n      }\r\n    } else if (right !== undefined && compare(right, node) < 0) {\r\n      heap[index] = right;\r\n      heap[rightIndex] = node;\r\n      index = rightIndex;\r\n    } else {\r\n      // Neither child is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction compare(a, b) {\r\n  // Compare sort index first, then task id.\r\n  var diff = a.sortIndex - b.sortIndex;\r\n  return diff !== 0 ? diff : a.id - b.id;\r\n}\r\n\r\n// TODO: Use symbols?\r\nvar NoPriority = 0;\r\nvar ImmediatePriority = 1;\r\nvar UserBlockingPriority = 2;\r\nvar NormalPriority = 3;\r\nvar LowPriority = 4;\r\nvar IdlePriority = 5;\r\n\r\nvar runIdCounter = 0;\r\nvar mainThreadIdCounter = 0;\r\nvar profilingStateSize = 4;\r\nvar sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer\r\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\r\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\r\n;\r\nvar profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\r\n\r\nvar PRIORITY = 0;\r\nvar CURRENT_TASK_ID = 1;\r\nvar CURRENT_RUN_ID = 2;\r\nvar QUEUE_SIZE = 3;\r\n\r\n{\r\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\r\n  // array might include canceled tasks.\r\n\r\n  profilingState[QUEUE_SIZE] = 0;\r\n  profilingState[CURRENT_TASK_ID] = 0;\r\n} // Bytes per element is 4\r\n\r\n\r\nvar INITIAL_EVENT_LOG_SIZE = 131072;\r\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\r\n\r\nvar eventLogSize = 0;\r\nvar eventLogBuffer = null;\r\nvar eventLog = null;\r\nvar eventLogIndex = 0;\r\nvar TaskStartEvent = 1;\r\nvar TaskCompleteEvent = 2;\r\nvar TaskErrorEvent = 3;\r\nvar TaskCancelEvent = 4;\r\nvar TaskRunEvent = 5;\r\nvar TaskYieldEvent = 6;\r\nvar SchedulerSuspendEvent = 7;\r\nvar SchedulerResumeEvent = 8;\r\n\r\nfunction logEvent(entries) {\r\n  if (eventLog !== null) {\r\n    var offset = eventLogIndex;\r\n    eventLogIndex += entries.length;\r\n\r\n    if (eventLogIndex + 1 > eventLogSize) {\r\n      eventLogSize *= 2;\r\n\r\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\r\n        // Using console['error'] to evade Babel and ESLint\r\n        console['error'](\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\r\n        stopLoggingProfilingEvents();\r\n        return;\r\n      }\r\n\r\n      var newEventLog = new Int32Array(eventLogSize * 4);\r\n      newEventLog.set(eventLog);\r\n      eventLogBuffer = newEventLog.buffer;\r\n      eventLog = newEventLog;\r\n    }\r\n\r\n    eventLog.set(entries, offset);\r\n  }\r\n}\r\n\r\nfunction startLoggingProfilingEvents() {\r\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\r\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\r\n  eventLog = new Int32Array(eventLogBuffer);\r\n  eventLogIndex = 0;\r\n}\r\nfunction stopLoggingProfilingEvents() {\r\n  var buffer = eventLogBuffer;\r\n  eventLogSize = 0;\r\n  eventLogBuffer = null;\r\n  eventLog = null;\r\n  eventLogIndex = 0;\r\n  return buffer;\r\n}\r\nfunction markTaskStart(task, ms) {\r\n  {\r\n    profilingState[QUEUE_SIZE]++;\r\n\r\n    if (eventLog !== null) {\r\n      // performance.now returns a float, representing milliseconds. When the\r\n      // event is logged, it's coerced to an int. Convert to microseconds to\r\n      // maintain extra degrees of precision.\r\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskCompleted(task, ms) {\r\n  {\r\n    profilingState[PRIORITY] = NoPriority;\r\n    profilingState[CURRENT_TASK_ID] = 0;\r\n    profilingState[QUEUE_SIZE]--;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskCanceled(task, ms) {\r\n  {\r\n    profilingState[QUEUE_SIZE]--;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskErrored(task, ms) {\r\n  {\r\n    profilingState[PRIORITY] = NoPriority;\r\n    profilingState[CURRENT_TASK_ID] = 0;\r\n    profilingState[QUEUE_SIZE]--;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskRun(task, ms) {\r\n  {\r\n    runIdCounter++;\r\n    profilingState[PRIORITY] = task.priorityLevel;\r\n    profilingState[CURRENT_TASK_ID] = task.id;\r\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\r\n    }\r\n  }\r\n}\r\nfunction markTaskYield(task, ms) {\r\n  {\r\n    profilingState[PRIORITY] = NoPriority;\r\n    profilingState[CURRENT_TASK_ID] = 0;\r\n    profilingState[CURRENT_RUN_ID] = 0;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\r\n    }\r\n  }\r\n}\r\nfunction markSchedulerSuspended(ms) {\r\n  {\r\n    mainThreadIdCounter++;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\r\n    }\r\n  }\r\n}\r\nfunction markSchedulerUnsuspended(ms) {\r\n  {\r\n    if (eventLog !== null) {\r\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\r\n    }\r\n  }\r\n}\r\n\r\n/* eslint-disable no-var */\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\n\r\nvar maxSigned31BitInt = 1073741823; // Times out immediately\r\n\r\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\r\n\r\nvar USER_BLOCKING_PRIORITY = 250;\r\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\r\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\r\n\r\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\r\n\r\nvar taskQueue = [];\r\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\r\n\r\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\r\nvar currentTask = null;\r\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\r\n\r\nvar isPerformingWork = false;\r\nvar isHostCallbackScheduled = false;\r\nvar isHostTimeoutScheduled = false;\r\n\r\nfunction advanceTimers(currentTime) {\r\n  // Check for tasks that are no longer delayed and add them to the queue.\r\n  var timer = peek(timerQueue);\r\n\r\n  while (timer !== null) {\r\n    if (timer.callback === null) {\r\n      // Timer was cancelled.\r\n      pop(timerQueue);\r\n    } else if (timer.startTime <= currentTime) {\r\n      // Timer fired. Transfer to the task queue.\r\n      pop(timerQueue);\r\n      timer.sortIndex = timer.expirationTime;\r\n      push(taskQueue, timer);\r\n\r\n      {\r\n        markTaskStart(timer, currentTime);\r\n        timer.isQueued = true;\r\n      }\r\n    } else {\r\n      // Remaining timers are pending.\r\n      return;\r\n    }\r\n\r\n    timer = peek(timerQueue);\r\n  }\r\n}\r\n\r\nfunction handleTimeout(currentTime) {\r\n  isHostTimeoutScheduled = false;\r\n  advanceTimers(currentTime);\r\n\r\n  if (!isHostCallbackScheduled) {\r\n    if (peek(taskQueue) !== null) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    } else {\r\n      var firstTimer = peek(timerQueue);\r\n\r\n      if (firstTimer !== null) {\r\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(hasTimeRemaining, initialTime) {\r\n  {\r\n    markSchedulerUnsuspended(initialTime);\r\n  } // We'll need a host callback the next time work is scheduled.\r\n\r\n\r\n  isHostCallbackScheduled = false;\r\n\r\n  if (isHostTimeoutScheduled) {\r\n    // We scheduled a timeout but it's no longer needed. Cancel it.\r\n    isHostTimeoutScheduled = false;\r\n    cancelHostTimeout();\r\n  }\r\n\r\n  isPerformingWork = true;\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n\r\n  try {\r\n    if (enableProfiling) {\r\n      try {\r\n        return workLoop(hasTimeRemaining, initialTime);\r\n      } catch (error) {\r\n        if (currentTask !== null) {\r\n          var currentTime = exports.unstable_now();\r\n          markTaskErrored(currentTask, currentTime);\r\n          currentTask.isQueued = false;\r\n        }\r\n\r\n        throw error;\r\n      }\r\n    } else {\r\n      // No catch in prod codepath.\r\n      return workLoop(hasTimeRemaining, initialTime);\r\n    }\r\n  } finally {\r\n    currentTask = null;\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    isPerformingWork = false;\r\n\r\n    {\r\n      var _currentTime = exports.unstable_now();\r\n\r\n      markSchedulerSuspended(_currentTime);\r\n    }\r\n  }\r\n}\r\n\r\nfunction workLoop(hasTimeRemaining, initialTime) {\r\n  var currentTime = initialTime;\r\n  advanceTimers(currentTime);\r\n  currentTask = peek(taskQueue);\r\n\r\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\r\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\r\n      // This currentTask hasn't expired, and we've reached the deadline.\r\n      break;\r\n    }\r\n\r\n    var callback = currentTask.callback;\r\n\r\n    if (callback !== null) {\r\n      currentTask.callback = null;\r\n      currentPriorityLevel = currentTask.priorityLevel;\r\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\r\n      markTaskRun(currentTask, currentTime);\r\n      var continuationCallback = callback(didUserCallbackTimeout);\r\n      currentTime = exports.unstable_now();\r\n\r\n      if (typeof continuationCallback === 'function') {\r\n        currentTask.callback = continuationCallback;\r\n        markTaskYield(currentTask, currentTime);\r\n      } else {\r\n        {\r\n          markTaskCompleted(currentTask, currentTime);\r\n          currentTask.isQueued = false;\r\n        }\r\n\r\n        if (currentTask === peek(taskQueue)) {\r\n          pop(taskQueue);\r\n        }\r\n      }\r\n\r\n      advanceTimers(currentTime);\r\n    } else {\r\n      pop(taskQueue);\r\n    }\r\n\r\n    currentTask = peek(taskQueue);\r\n  } // Return whether there's additional work\r\n\r\n\r\n  if (currentTask !== null) {\r\n    return true;\r\n  } else {\r\n    var firstTimer = peek(timerQueue);\r\n\r\n    if (firstTimer !== null) {\r\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n    case LowPriority:\r\n    case IdlePriority:\r\n      break;\r\n\r\n    default:\r\n      priorityLevel = NormalPriority;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_next(eventHandler) {\r\n  var priorityLevel;\r\n\r\n  switch (currentPriorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n      // Shift down to normal priority\r\n      priorityLevel = NormalPriority;\r\n      break;\r\n\r\n    default:\r\n      // Anything lower than normal priority should remain at the current level.\r\n      priorityLevel = currentPriorityLevel;\r\n      break;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_wrapCallback(callback) {\r\n  var parentPriorityLevel = currentPriorityLevel;\r\n  return function () {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    var previousPriorityLevel = currentPriorityLevel;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n\r\n    try {\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n    }\r\n  };\r\n}\r\n\r\nfunction timeoutForPriorityLevel(priorityLevel) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n      return IMMEDIATE_PRIORITY_TIMEOUT;\r\n\r\n    case UserBlockingPriority:\r\n      return USER_BLOCKING_PRIORITY;\r\n\r\n    case IdlePriority:\r\n      return IDLE_PRIORITY;\r\n\r\n    case LowPriority:\r\n      return LOW_PRIORITY_TIMEOUT;\r\n\r\n    case NormalPriority:\r\n    default:\r\n      return NORMAL_PRIORITY_TIMEOUT;\r\n  }\r\n}\r\n\r\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\r\n  var currentTime = exports.unstable_now();\r\n  var startTime;\r\n  var timeout;\r\n\r\n  if (typeof options === 'object' && options !== null) {\r\n    var delay = options.delay;\r\n\r\n    if (typeof delay === 'number' && delay > 0) {\r\n      startTime = currentTime + delay;\r\n    } else {\r\n      startTime = currentTime;\r\n    }\r\n\r\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\r\n  } else {\r\n    timeout = timeoutForPriorityLevel(priorityLevel);\r\n    startTime = currentTime;\r\n  }\r\n\r\n  var expirationTime = startTime + timeout;\r\n  var newTask = {\r\n    id: taskIdCounter++,\r\n    callback: callback,\r\n    priorityLevel: priorityLevel,\r\n    startTime: startTime,\r\n    expirationTime: expirationTime,\r\n    sortIndex: -1\r\n  };\r\n\r\n  {\r\n    newTask.isQueued = false;\r\n  }\r\n\r\n  if (startTime > currentTime) {\r\n    // This is a delayed task.\r\n    newTask.sortIndex = startTime;\r\n    push(timerQueue, newTask);\r\n\r\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\r\n      // All tasks are delayed, and this is the task with the earliest delay.\r\n      if (isHostTimeoutScheduled) {\r\n        // Cancel an existing timeout.\r\n        cancelHostTimeout();\r\n      } else {\r\n        isHostTimeoutScheduled = true;\r\n      } // Schedule a timeout.\r\n\r\n\r\n      requestHostTimeout(handleTimeout, startTime - currentTime);\r\n    }\r\n  } else {\r\n    newTask.sortIndex = expirationTime;\r\n    push(taskQueue, newTask);\r\n\r\n    {\r\n      markTaskStart(newTask, currentTime);\r\n      newTask.isQueued = true;\r\n    } // Schedule a host callback, if needed. If we're already performing work,\r\n    // wait until the next time we yield.\r\n\r\n\r\n    if (!isHostCallbackScheduled && !isPerformingWork) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    }\r\n  }\r\n\r\n  return newTask;\r\n}\r\n\r\nfunction unstable_pauseExecution() {\r\n}\r\n\r\nfunction unstable_continueExecution() {\r\n\r\n  if (!isHostCallbackScheduled && !isPerformingWork) {\r\n    isHostCallbackScheduled = true;\r\n    requestHostCallback(flushWork);\r\n  }\r\n}\r\n\r\nfunction unstable_getFirstCallbackNode() {\r\n  return peek(taskQueue);\r\n}\r\n\r\nfunction unstable_cancelCallback(task) {\r\n  {\r\n    if (task.isQueued) {\r\n      var currentTime = exports.unstable_now();\r\n      markTaskCanceled(task, currentTime);\r\n      task.isQueued = false;\r\n    }\r\n  } // Null out the callback to indicate the task has been canceled. (Can't\r\n  // remove from the queue because you can't remove arbitrary nodes from an\r\n  // array based heap, only the first one.)\r\n\r\n\r\n  task.callback = null;\r\n}\r\n\r\nfunction unstable_getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\nfunction unstable_shouldYield() {\r\n  var currentTime = exports.unstable_now();\r\n  advanceTimers(currentTime);\r\n  var firstTask = peek(taskQueue);\r\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\r\n}\r\n\r\nvar unstable_requestPaint = requestPaint;\r\nvar unstable_Profiling =  {\r\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\r\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\r\n  sharedProfilingBuffer: sharedProfilingBuffer\r\n} ;\r\n\r\nexports.unstable_IdlePriority = IdlePriority;\r\nexports.unstable_ImmediatePriority = ImmediatePriority;\r\nexports.unstable_LowPriority = LowPriority;\r\nexports.unstable_NormalPriority = NormalPriority;\r\nexports.unstable_Profiling = unstable_Profiling;\r\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\r\nexports.unstable_cancelCallback = unstable_cancelCallback;\r\nexports.unstable_continueExecution = unstable_continueExecution;\r\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\r\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\r\nexports.unstable_next = unstable_next;\r\nexports.unstable_pauseExecution = unstable_pauseExecution;\r\nexports.unstable_requestPaint = unstable_requestPaint;\r\nexports.unstable_runWithPriority = unstable_runWithPriority;\r\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\r\nexports.unstable_shouldYield = unstable_shouldYield;\r\nexports.unstable_wrapCallback = unstable_wrapCallback;\r\n  })();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}